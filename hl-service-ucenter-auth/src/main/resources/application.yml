server:
  port: ${PORT:40400}
  servlet:
    context-path: /auth
spring:
  application:
    name: hl-service-ucenter-auth
  redis:
    host: ${REDIS_HOST:127.0.0.1}
    port: ${REDIS_PORT:6379}
    timeout: 5000 #连接超时 毫秒
    jedis:
      pool:
        maxActive: 3
        maxIdle: 3
        minIdle: 1
        maxWait: -1 #连接池最大等行时间 -1没有限制
  datasource:
    #    druid:
    #      url: jdbc:mysql://localhost/hl_user?userSSL=true&useUnicode=true&characterEncoding=UTF8&serverTimezone=Asia/Shanghai
    #      username: root
    #      password: 123456
    #      driverClassName: com.mysql.cj.jdbc.Driver
    #      initialSize: 5  #初始建立连接数量
    #      minIdle: 5  #最小连接数量
    #      maxActive: 20 #最大连接数量
    #      maxWait: 10000  #获取连接最大等待时间，毫秒
    #      testOnBorrow: true #申请连接时检测连接是否有效
    #      testOnReturn: false #归还连接时检测连接是否有效
    #      timeBetweenEvictionRunsMillis: 60000 #配置间隔检测连接是否有效的时间（单位是毫秒）
    #      minEvictableIdleTimeMillis: 300000  #连接在连接池的最小生存时间（毫秒）
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.zaxxer.hikari.HikariDataSource
    username: root
    password: comac.123
    url: jdbc:mysql://115.29.190.60:3306/hl_user?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Hongkong&allowPublicKeyRetrieval=true
    hikari:
      # 是否自动提交
      auto-commit: true
      # 如果在没有连接可用的情况下超过此时间，则将抛出SQLException
      connection-timeout: 30000
      # 控制允许连接在池中空闲的最长时间
      idle-timeout: 600000
      # 控制池中连接的最长生命周期。使用中的连接永远不会退役，只有当它关闭时才会被删除
      max-lifetime: 1800000
      # 如果您的驱动程序支持JDBC4，强烈建议不要设置此属性
      # connection-test-query:
      # 控制HikariCP尝试在池中维护的最小空闲连接数。建议不要设置此值，而是允许HikariCP充当固定大小的连接池。 默认值：与maximumPoolSize相同
      # minimum-idle:
      # 此属性控制允许池到达的最大大小，包括空闲和正在使用的连接。
      maximum-pool-size: 10
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
auth:
  tokenValiditySeconds: 3600  #token存储到redis的过期时间
  clientId: XcWebApp
  clientSecret: XcWebApp
  cookieDomain: haili.com
  cookieMaxAge: -1
encrypt:
  key-store:
    location: classpath:/hl.keystore
    secret: hailistorepass
    alias: hlkey
    password: hailikeypass
eureka:
  client:
    registerWithEureka: true #服务注册开关
    fetchRegistry: true #服务发现开关
    serviceUrl: #Eureka客户端与Eureka服务端进行交互的地址，多个中间用逗号分隔
      defaultZone: ${EUREKA_SERVER:http://localhost:50101/eureka/,http://localhost:50102/eureka/}
  instance:
    prefer-ip-address:  true  #将自己的ip地址注册到Eureka服务中
    ip-address: ${IP_ADDRESS:127.0.0.1}
    instance-id: ${spring.application.name}:${server.port} #指定实例id
ribbon:
  MaxAutoRetries: 2 #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试，如果eureka中找不到服务则直接走断路器
  MaxAutoRetriesNextServer: 3 #切换实例的重试次数
  OkToRetryOnAllOperations: false  #对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false
  ConnectTimeout: 5000  #请求连接的超时时间
  ReadTimeout: 6000 #请求处理的超时时间





